#!/usr/bin/env python

"""Download a video on YouTube and upload it to the ITK Bar Camp archive on
Midas.

Dependencies:

* `youtube-dl <http://rg3.github.com/youtube-dl/>`_
* `pidas <http://github.com/midasplatform/pydas>`_
"""

import hashlib
import os
import subprocess
import sys

import pydas

def run(youtube_url):
    # download the video
    video_filename = subprocess.check_output(['youtube-dl', '--title',
        '--get-filename', '--prefer-free-formats', youtube_url])
    video_filename = video_filename.strip()
    subprocess.check_call(['youtube-dl', '--title',
        '--prefer-free-formats', youtube_url])

    # connect to Midas
    midas_url = 'http://midas3.kitware.com/midas/'
    print('Please enter your login information for ' + midas_url)
    token = pydas.login(url=midas_url)
    session = pydas.session
    communicator = session.communicator

    # get the MD5 checksum
    print('Computing MD5 checksum...')
    md5 = hashlib.md5()
    with open(video_filename, 'rb') as fp:
        for chunk in iter(lambda: fp.read(128 * md5.block_size), b''):
            md5.update(chunk)
    md5hash = md5.hexdigest()
    print('Checksum: ' + md5hash)

    # upload to Midas
    def get_child_folder(parent, child_name):
        children = communicator.folder_children(session.token, parent['folder_id'])
        for folder in children['folders']:
            if folder['name'] == child_name:
                return folder
        return None
    itk_community = communicator.get_community_by_name('ITK')
    itk_public = get_child_folder(itk_community, 'Public')
    itk_bar_camp = get_child_folder(itk_public, 'ITKBarCamp')

    categories = ['C++Development',
            'CommunitySoftwareProcess',
            'ImageProcessing',
            'ITK',
            'SoftwareQuality']
    print('Choose a category:')
    for category in enumerate(categories):
        print('  [' + str(category[0]) + '] ' + category[1])
    chosen_category = raw_input('Category: ')
    category = get_child_folder(itk_bar_camp, categories[int(chosen_category)])
    category_children = communicator.folder_children(session.token,
            category['folder_id'])

    # get the existing or create a new item to hold the video
    item_id = None
    for item in category_children['items']:
        if item['name'] == video_filename:
            item_id = item['item_id']
            break

    if item_id is None:
        new_item = communicator.create_item(session.token, video_filename,
                category['folder_id'])
        item_id = new_item['item_id']

    upload_token = communicator.generate_upload_token(session.token,
            item_id,
            video_filename,
            md5hash)
    communicator.perform_upload(upload_token,
            video_filename,
            item_id=item_id,
            filepath=video_filename)

    os.remove(video_filename)


if __name__ == '__main__':
    usage = 'Usage: ' + sys.argv[0] + ' <YouTubeURL>'
    if len(sys.argv) < 2:
        print(usage)
        sys.exit(1)
    run(sys.argv[1])
